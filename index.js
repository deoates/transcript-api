// Generated by CoffeeScript 1.8.0
(function() {
  var Mimer, app, bodyParser, bucket, cors, express, fs, gcloud, multiparty, storage, stripe, stripeKey;

  gcloud = require('gcloud');

  fs = require('fs');

  multiparty = require('multiparty');

  Mimer = require('mimer');

  express = require('express');

  cors = require('cors');

  bodyParser = require('body-parser');

  app = express();

  app.use(express["static"](__dirname + '/public'));

  app.set('port', process.env.PORT || 5000);

  app.use(cors());

  app.use(bodyParser.json());

  app.use(bodyParser.urlencoded({
    extended: true
  }));

  app.listen(app.get('port'), function() {
    return 'App is running on port: ' + app.get('port');
  });

  stripeKey = 'pk_live_hsLlDsQtfXsdbHWWpiWjoJd2';

  stripe = require("stripe")(stripeKey);

  app.get('/stripeKey', function(req, res) {
    return res.send(stripeKey);
  });

  app.post('/order', function(req, res) {
    var amt, card, email;
    amt = req.param('amt');
    card = req.param('card');
    email = req.param('email');
    console.log(amt, card, email);
    return;
    return stripe.charges.create({
      amount: amt,
      currency: "usd",
      card: card,
      description: "Charge: " + email,
      metadata: {
        'email': email
      }
    }, function(err, charge) {
      return console.log(err, charge);
    });
  });

  storage = gcloud.storage({
    keyFilename: 'keys.json',
    projectId: '367709922404'
  });

  bucket = storage.bucket('transcript-engine');

  app.post('/upload', function(req, res) {
    var err, form;
    form = new multiparty.Form({
      autoFile: false
    });
    form.on('close', function() {
      return res.send(200);
    });
    form.on('error', function(err) {
      var statusCode;
      statusCode = err.statusCode || 404;
      res.status(statusCode);
    });
    form.on('part', function(part) {
      var file, fileName, fileType, options;
      part.on('error', function(err) {
        var statusCode;
        statusCode = err.statusCode || 404;
        res.status(statusCode);
      });
      fileType = '.' + part.filename.split('.').pop().toLowerCase();
      fileName = "" + (Date.now()) + "-" + part.filename;
      console.log(fileName);
      options = {
        resumable: true,
        validation: 'crc32c',
        metadata: {
          contentType: Mimer(fileType)
        }
      };
      part.headers = null;
      file = bucket.file(fileName);
      return part.pipe(file.createWriteStream(options)).on('error', function(err) {
        return console.log(err);
      });
    });
    try {
      return form.parse(req);
    } catch (_error) {
      err = _error;
      return console.log(err);
    }
  });

}).call(this);
