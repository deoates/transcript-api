// Generated by CoffeeScript 1.8.0
(function() {
  var Mimer, app, bodyParser, bucket, cors, express, ffmpeg, fs, gcloud, morgan, multiparty, publishableStripeKey, secretStripeKey, storage, stripe;

  gcloud = require('gcloud');

  fs = require('fs');

  multiparty = require('multiparty');

  Mimer = require('mimer');

  express = require('express');

  cors = require('cors');

  morgan = require('morgan');

  ffmpeg = require('fluent-ffmpeg');

  bodyParser = require('body-parser');

  app = express();

  app.use(express["static"](__dirname + '/public'));

  app.set('port', process.env.PORT || 8080);

  app.use(cors());

  app.use(bodyParser.json());

  app.use(bodyParser.urlencoded({
    extended: true
  }));

  app.use(morgan('tiny'));

  app.use(function(err, req, res, next) {
    console.error(err.stack);
    return res.status(500).send('Something broke!');
  });

  app.listen(app.get('port'), function() {
    return console.log('App is running on port: ' + app.get('port'));
  });

  publishableStripeKey = 'pk_live_hsLlDsQtfXsdbHWWpiWjoJd2';

  secretStripeKey = 'sk_live_PW91KQpJVLgZSOOBcrCpkYKa';

  stripe = require("stripe")(secretStripeKey);

  app.get('/stripeKey', function(req, res) {
    return res.status(200).send(publishableStripeKey);
  });

  app.post('/order', function(req, res) {
    var amount, charge, email, files, length, token;
    amount = req.param('amount');
    token = req.param('token');
    email = req.param('email');
    files = req.param('files');
    length = req.param('length');
    return charge = stripe.charges.create({
      amount: amount,
      currency: "usd",
      card: token,
      metadata: {
        'email': email,
        'files': files,
        'length': length
      },
      description: length + " audio transcription"
    }, function(err, charge) {
      if (err) {
        console.log(err);
        if (err.type === 'StripeCardError') {
          return res.status(400).send('Payment declined');
        }
      } else {
        console.log(charge);
        return res.status(200).send('Payment successful!');
      }
    });
  });

  storage = gcloud.storage({
    keyFilename: 'keys.json',
    projectId: '367709922404'
  });

  bucket = storage.bucket('transcript-engine');

  app.post('/upload', function(req, res) {
    var err, fileName, fileType, form;
    fileName = "";
    fileType = "";
    form = new multiparty.Form({
      autoFile: false
    });
    form.on('close', function() {
      var options;
      ffmpeg.ffprobe("./uploads/" + fileName, function(err, metadata) {
        if ((metadata != null ? metadata.format : void 0) != null) {
          res.status(200).send(metadata.format);
          return console.log("File upload + duration check successful");
        } else {
          res.status(200).send("Unknown length");
          return console.log("File upload successful, duration check failed");
        }
      });
      options = {
        resumable: true,
        validation: 'crc32c',
        destination: fileName,
        metadata: {
          contentType: Mimer(fileType)
        }
      };
      return bucket.upload("./uploads/" + fileName, options, function(err, file) {
        if (err != null) {
          console.log("Error uploading file to Google Cloud Storage");
          console.log(err);
        }
        if (file != null) {
          console.log("File uploaded to Google Cloud storage, deleting from disk");
          return fs.unlink("./uploads/" + fileName);
        }
      });
    });
    form.on('error', function(err) {
      var statusCode;
      statusCode = err.statusCode || 404;
      res.status(statusCode);
      console.log("Error uploading file");
      console.log(err);
    });
    form.on('part', function(part) {
      var writeStream;
      part.on('error', function(err) {
        var statusCode;
        statusCode = err.statusCode || 404;
        res.status(statusCode);
        console.log("Error uploading file");
        console.log(err);
      });
      console.log("Upload started for " + part.filename);
      fileType = '.' + part.filename.split('.').pop().toLowerCase();
      fileName = "" + (Date.now()) + "-" + part.filename;
      part.headers = null;
      writeStream = fs.createWriteStream('./uploads/' + fileName);
      console.log("File renamed to " + fileName);
      return part.pipe(writeStream).on('error', function(err) {
        return console.log(err);
      });
    });
    try {
      return form.parse(req);
    } catch (_error) {
      err = _error;
      return console.log(err);
    }
  });

}).call(this);
